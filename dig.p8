pico-8 cartridge // http://www.pico-8.com
version 18
__lua__

players = {}
blasts = {}
bullets = {}
field_width = 128
field_height = 64

field_width = 28
field_height = 14

reset_timer = 0
reset_time = 60


function _init()

 for x=0,field_width-1 do
	 for y=0,field_height-1 do
			mset(x, y, 1)
			if (rnd(10)<=1) mset(x,y,2)
	 end
 	mset(x,0,2)
 	mset(x,field_height-1,2)
 end 
 for y=0,field_height-1 do
 	mset(0,y,2)
 	mset(field_width-1,y,2)
 end
 
 add(players, add_player(1))
 add(players, add_player(2))
end

function _update()
 for b in all(blasts) do
	 b.tick += 1
	 b.x += b.vx
	 b.y += b.vy
	 if (b.tick > b.duration) then
	 	del(blasts, b)
	 end
 end
 
	for g in all(players) do
		if g.mining>0 then
			g.mining -=1
		elseif not g.exploding and g.alive then
		 g.fx = false
		 g.fy = false
		 g.angled = false
		 
		 dx = 0
		 dy = 0
		 if (btn(0, g.index-1)) dx = -1
		 if (btn(1, g.index-1)) dx = 1
		 if (btn(2, g.index-1)) dy = -1
		 if (btn(3, g.index-1)) dy = 1
		 
		 g.shot_timer -= 1
		 
		 if (g.shot_timer <= 0 and btnp(4, g.index-1)) then
		  fire(g)
		  g.shot_timer = g.shot_time
		 end

   g.shield = false		 
		 if (btn(5, g.index-1)) then
		  g.shield_charge -= 1
		  if (g.shield_charge > 0) then
		   g.shield=true
		  else
		   g.shield_charge = 0
		  end
		 end
		 if dx != 0 or dy != 0 then
		  try_xy(g, dx, dy)
		 end
		 
		 if abs(g.x - g.homex) < 3*8
     then
     
     g.shield_charge = min(g.shield_charge+1, g.shield_charge_max)
   end

		end
 end
 
 for b in all(bullets) do
  move_bullet(b)
 end
 
 if reset_timer > 0 then
  reset_timer -= 1
  if reset_timer <= 0 then
   reset()
  end
 end
end

function _draw()
 cls()
	draw_player(players[1], -4)
	draw_player(players[2], 63+4)
	
	
end




-->8
-- player
facings = {{7,0,1},
											{6,0,2},
											{5,4,3}}

function add_player(index)
 p = {}
 p.index = index
 p.x = (rnd(field_width-8) + 4) * 8
 p.y = (rnd(field_height-8) + 4) * 8

 //p.x = (rnd(40) + 4) * 8
 //p.y = (rnd(20) + 4) * 8
 p.homex = p.x
 p.homey = p.y

 p.v = 1
 p.sprite = 16 + (index-1)*8
 p.mining = 0
 p.mine_time = 10
 
 p.shot_timer = 0
 p.shot_time = 10
 p.shield_phase = 0
 p.shield_charge_max = 100
 p.shield_charge = p.shield_charge_max
 
 p.facing = 0
 p.health = 5
 p.max_health = 5
 p.lives = 3
 p.max_lives = 3
 p.alive = true
 p.exploding = false
 
 clear_area(p,2)
 return p
end

function clear_area(p, r)
 tx = flr(p.x / 8)
 ty = flr(p.y / 8)

	for x = tx-r, tx-r+2*r do
	 for y = ty-r, ty-r+2*r do
		 mset(x, y, 0)
	 end
	end
	
	r=2*r
	for i=0,2 do
	 // top & bottom
	 mset(tx-r+i,ty-r,31+p.index)
	 mset(tx+r-i,ty-r,31+p.index)
	 mset(tx-r+i,ty+r,31+p.index)
	 mset(tx+r-i,ty+r,31+p.index)
	 
	 // left & right
	 mset(tx-r,ty-r+i,31+p.index)
	 mset(tx+r,ty-r+i,31+p.index)
	 mset(tx-r,ty+r-i,31+p.index)
	 mset(tx+r,ty+r-i,31+p.index)
	end
	
end

function draw_player(p, sy)
 tx = flr(p.x / 8 - 8)
 ty = flr(p.y / 8 - 4)
 
 ox = p.x % 8
 oy = p.y % 8
 
 clip( 0, sy, 128, 64 )
 map(tx,ty,-ox,sy-oy,17,9)

	for g in all(players) do
	 if not g.exploding and g.alive then
 	 spr(g.sprite + g.facing,g.x - tx*8 - ox - 4, sy + g.y - ty*8 -oy - 4)

			if (g.shield) then
			 p.shield_phase +=1
			 sp = p.shield_phase % 2
  	 spr(44+sp*2,g.x - tx*8 - ox - 8, sy + g.y - ty*8 -oy - 8 ,2,2)
		  sfx(4+sp)
   end
   if (g.health < 5) then
    line(g.x - tx*8 - ox - 4
        ,sy + g.y - ty*8 -oy - 6
        ,g.x + g.health*2 - tx*8 - ox - 5
        ,sy + g.y - ty*8 -oy - 6
        ,7+g.health)
   end
  // if (g.shield_charge>0 and g.shield_charge < g.shield_charge_max) then
   if (g.shield_charge>0) then
    line(g.x - tx*8 - ox - 4
        ,sy + g.y - ty*8 -oy - 8
        ,g.x + (g.shield_charge/g.shield_charge_max*8) - tx*8 - ox - 4
        ,sy + g.y - ty*8 -oy - 8
        ,12)
   end
   
   
   // circ(g.x - tx*8 - ox - 0, sy + g.y - ty*8 -oy -0, 6)
	 end
	end
	
	for b in all(blasts) do
	 spr(blast_sprite(b), b.x - tx*8 - ox, sy + b.y - ty*8 -oy)
	end

 for b in all(bullets) do
  spr(b.sprite, b.x - tx*8 - ox - 4, sy + b.y - ty*8 -oy - 4)
 end

end

											
function try_xy(p, dx, dy)
 p.facing = facings[dy+2][dx+2]
 
	x = p.x + dx * p.v
	y = p.y + dy * p.v

 tx = (x-2)/8
 ty = (y-2)/8

 if (maybe_blast(p, flr(tx), flr(ty))) return
 if (maybe_blast(p, flr(tx+2/4), flr(ty))) return
 if (maybe_blast(p, flr(tx), flr(ty+2/4))) return
 if (maybe_blast(p, flr(tx+2/4), flr(ty+2/4))) return
 
 p.x = x
 p.y = y
end

function is_tile_hit(p, tx, ty)
 t = mget(tx, ty)
	if fget(t,1) then
		return true
	end
	
	return false
end

function is_flag_hit(p,tx,ty,f)
 t = mget(tx, ty)
	if fget(t,f) then
		return true
	end
	
	return false
end

function maybe_blast(p, tx, ty)
 if is_flag_hit(p, tx, ty,1) then
		mset(tx, ty, 0)
		p.mining = p.mine_time
		add_blast(tx*8, ty*8,0,0, 10, 48, 5)
		sfx(1)
		return true
	elseif is_flag_hit(p, tx, ty,2) then
		return true
 end

 return false
 
end

function damage(p)
 if not p.shield then
  p.health -= 1
 end
 sfx(3)
 if (p.health == 0) then
  //p.exploding = true
  for i=1,10 do
	  vx = rnd(2)-1
	  vy = rnd(2)-1
		 add_blast(p.x-4, p.y-4,vx,vy, 10, 53, 3)
		end
		sfx(1)
		sfx(2)
		p.alive = false
		reset_timer = reset_time
		//reset()
 end
end

function reset()
 for p in all(players) do
	 p.x = p.homex
	 p.y = p.homey
	 p.health = p.max_health
	 p.alive = true
	 reset_timer = 0
 end
end

-->8
-- blast
function add_blast(x, y, vx, vy, duration, sprite, sprite_count)
 b = {}
 b.x = x
 b.y = y
 b.vx = vx
 b.vy = vy
 b.duration = duration
 b.tick = 0
 b.sprite = sprite
 b.sprite_count = sprite_count
 
 add(blasts, b)
end

function blast_sprite(b)
 return b.sprite + b.tick/b.duration*b.sprite_count
end
-->8
-- bullets
b_vel = 2

facing_x = {0,1,1,1,0,-1,-1,-1}
facing_y = {-1,-1,0,1,1,1,0,-1}

function fire(p)
 b = {}
 b.x = p.x
 b.y = p.y
 b.facing = p.facing
 b.vx = facing_x[b.facing+1] * b_vel
 b.vy = facing_y[b.facing+1] * b_vel
 b.sprite = 40
 b.player = p
 b.blasting = 0
 b.blast_time = 10
 
 add(bullets,b)
 sfx(2)
end

function move_bullet(b)
 x = b.x + b.vx
 y = b.y + b.vy
 
 tx = x/8
 ty = y/8
 
 b.x = x
 b.y = y
 
 if is_flag_hit(b, tx, ty, 1)
  or is_flag_hit(b, tx, ty, 2) then
		add_blast(x-4, y-4,0,0, b.blast_time, 53, 3)

  del(bullets,b)
 else 
  p = get_player_hit(b)
 	if p != nil then
		 add_blast(x-4, y-4,0,0, b.blast_time, 53, 3)
		 damage(p)
	  del(bullets,b)

 	end
 end
 
end

function get_player_hit(b)
 for p in all(players) do
  if p.index != b.player.index 
     and p.alive then
   if b.x > p.x-6 
    and b.x < p.x + 5  
    and b.y > p.y-6
    and b.y < p.y + 5
    then
     return p
    end
  end
 end
 
 return nil
end
__gfx__
00000000005005006060005000100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000050000500050650011011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000050000506500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000005000050005006000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000500050000600060500111010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000005055600050010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000050000000006050601100001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000500500050500500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0060060000ad0700a5a5a0000000da00ad0000da00ad0000000a5a5a0070da000060060000bd0600b5b5b0000000db00bd0000db00bd0000000b5b5b0060db00
006006000ad57000d5d5d00000005da0551aa1550ad50000000d5d5d00075da0006006000bd56000d5d5d00000005db0551bb1550bd50000000d5d5d00065db0
00011000ad5011070111006600a105daad1111daad501a0066001110701105da00011000bd5011060111006600b105dbbd1111dbbd501b0066001110601105db
ad0aa0dad50aa1700a1aa100001aa05d551aa155d50aa100001aa1a0071aa05dbd0bb0dbd50bb1600b1bb100001bb05d551bb155d50bb100001bb1b0061bb05d
551aa155001aa05d0a1aa100d50aa170ad0aa0da071aa05d001aa1a0d50aa100551bb155001bb05d0b1bb100d50bb160bd0bb0db061bb05d001bb1b0d50bb100
ad1111da00a105da01110066ad50110700011000701105da66001110ad501a00bd1111db00b105db01110066bd50110600011000601105db66001110bd501b00
551aa15500005da0d5d5d0000ad570000060060000075da0000d5d5d0ad50000551bb15500005db0d5d5d0000bd560000060060000065db0000d5d5d0bd50000
ad0000da0000da00a5a5a00000ad0700006006000070da00000a5a5a00ad0000bd0000db0000db00b5b5b00000bd0600006006000060db00000b5b5b00bd0000
0000aaaa0000bbbb0066660000777700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000aaaa0000bbbb060000600700007000000000000000000000000000000000000000000070700000a00aa00000000000000066660000000000007777000000
0000aaaa0000bbbb6000000670000007000000000000000000000000000000000000000000707000a00aa0000000000000006600006600000000770000770000
0000aaaa0000bbbb60000006700000070000000000000000000000000000000000099000007070000aa99a000009900000060000000060000007000000007000
aaaa0000bbbb0000600000067000000700000000000000000000000000000000000890000777770000a89a000008900000600000000006000070000000000700
aaaa0000bbbb000060000006700000070000000000000000000000000000000000000000078787000a0aa0a00000000000600000000006000070000000000700
aaaa0000bbbb0000060000600700007000000000000000000000000000000000000000000777770000a0a0a00000000006000000000000600700000000000070
aaaa0000bbbb00000066660000777700000000000000000000000000000000000000000007000700000000000000000006000000000000600700000000000070
00500500005000000050000000500000000000000000000000000000000000040050000000500000000000000000000006000000000000600700000000000070
00000050700908500009000000000000000004000000000000000080090000000000000000000000000000000000000006000000000000600700000000000070
00a0500000005000000050a0000000000000000000000a0000a00000000000000000000000000000000000000000000000600000000006000070000000000700
0050000000500a0a0080000000080000000000000007000000000000000000000000000000000000000000000000000000600000000006000070000000000700
50007000007907000000098000000900000000000000700000000000000000000000000000000000000000000000000000060000000060000007000000007000
000005050900000500000005000000050000000000a0000000000a00000000000000000000000000000000000000000000006600006600000000770000770000
05800000050897000508000000900000008000000000000008000000000000900000000000000000000000000000000000000066660000000000007777000000
00050050000500500000005000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0002040800000000000000000000000000000000000000000000000000000000040400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0103030101010202010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0103030301010102020201010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0103030101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
0005000000000000100000000000000001c0401804018040180401705000040000402c04000040000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000001065005650106000560000600106000360000600000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000003d620346201c620146200b620066200362004000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000600000265003650066500b650106501265012650126500d6500965006650046500365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000a15014100131001110011100111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000c15000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
